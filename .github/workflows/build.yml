name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        ocaml-compiler:
          - "5.3.x"

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up OCaml ${{ matrix.ocaml-compiler }}
      uses: ocaml/setup-ocaml@v3
      with:
        ocaml-compiler: ${{ matrix.ocaml-compiler }}
        dune-cache: true

    - name: Install dependencies
      run: opam install --deps-only --with-test .

    - name: Build project
      run: opam exec -- dune build --release

    # - name: Run tests
    #   run: opam exec -- dune runtest

    # - name: Build static binary (Linux)
    #   if: matrix.os == 'ubuntu-latest'
    #   run: |
    #     opam install dune-static
    #     opam exec -- dune build --profile static

    - name: Create binary name
      id: binary-name
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          echo "binary=bible.exe" >> $GITHUB_OUTPUT
          echo "archive=bible-windows-x64.zip" >> $GITHUB_OUTPUT
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          echo "binary=bible" >> $GITHUB_OUTPUT
          echo "archive=bible-macos-x64.tar.gz" >> $GITHUB_OUTPUT
        else
          echo "binary=bible" >> $GITHUB_OUTPUT
          echo "archive=bible-linux-x64.tar.gz" >> $GITHUB_OUTPUT
        fi

    - name: Copy binary
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]] && [[ -f "_build/default/bin/main.exe" ]]; then
          cp "_build/default/bin/main.exe" "${{ steps.binary-name.outputs.binary }}"
        else
          cp "_build/default/bin/main.exe" "${{ steps.binary-name.outputs.binary }}"
        fi

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Compress-Archive -Path "${{ steps.binary-name.outputs.binary }}" -DestinationPath "${{ steps.binary-name.outputs.archive }}"

    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          tar -czf "${{ steps.binary-name.outputs.archive }}" "${{ steps.binary-name.outputs.binary }}"
        else
          tar -czf "${{ steps.binary-name.outputs.archive }}" "${{ steps.binary-name.outputs.binary }}"
        fi

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: bible-${{ matrix.os }}
        path: ${{ steps.binary-name.outputs.archive }}

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/*/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
